#include <Adafruit_GPS.h>
#include <SoftwareSerial.h>

int gpsRX = 5, gpsTX = 6;
int openlogRX = 2, openlogTX = 3; //there's the potential that this doesn't work because the level shifter is not connected across itself
uint32_t thermistorV, humidityV, pressureV, accX, accY, accZ, timer;
bool initStatement = false;

SoftwareSerial gpsSerial(gpsRX, gpsTX);
SoftwareSerial openlog(openlogRX, openlogTX);
Adafruit_GPS GPS(&gpsSerial);

#define GPSECHO  false

void setup() {

  // Initialize serial ports
  Serial.begin(9600);
  GPS.begin(9600);
  openlog.begin(9600);

  // Define I/O
  pinMode(A0, INPUT);
  pinMode(A1, INPUT);
  pinMode(A2, INPUT);
  pinMode(A4, INPUT);
  pinMode(A5, INPUT);
  pinMode(A6, INPUT);
  pinMode(A7, INPUT);

  // Specify GPS info
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA); // Return GPGGA only
  GPS.sendCommand(PGCMD_NOANTENNA); // Disable updates requests on antenna status,

  delay(1000);
}

double getTemperature() {
  int val = analogRead(A0);
  float voltage = val * 5.0;
  voltage /= 1024.0;
  float temperatureC = (voltage - 0.555) * 100;
  float temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;
 
  return temperatureF;
}

double getPressure() {
  double val = analogRead(A1);
  float pkpa = ((val/1023.0)+0.12)/0.009;
  return pkpa;
}

double getHumidity() {
  double val = analogRead(A2);
  double zeroPercentVoltage = .8;
  double max_voltage = (3.27 - (0.006706 * getTemperature())) ; // The max voltage value drops down 0.006705882 for each degree C over 0C. The voltage at 0C is 3.27 (corrected for zero precent voltage)
  double RH = ((((val / 1023) * 5) - zeroPercentVoltage) / max_voltage) * 100;
  return RH;
}

double getThermistor() {
  float val = analogRead(A3);
  float V = (5 * val) / 1023;
  float R = pow(((V / 5) / 1000), -1) - 1000;
  
  float B = 2513.34311206;
  float rInf = 0.0218266425983;
  float logVrInf = log(R/rInf);
  float C = (B / logVrInf) - 273.15;
  return C;
}


double getAccelX() {
  double val = analogRead(A4);
  int x = map(val, 267, 400, -100, 100);
  float xg = (float) x / (-100.00);
  return xg;
}

double getAccelY() {
  double val = analogRead(A5);
  int y = map(val, 272, 406, -100, 100);
  float yg = (float) y / (-100.00);
  return yg;
}

double getAccelZ() {
  double val = analogRead(A6);
  int z = map(val, 277, 410, -100, 100);
  float zg = (float) z / (-100.00);
  return zg;
}

double getUV() {
  double val = analogRead(A7);
//  double val = analogRead(A2);
  double valVoltage = (val * 5) / 1023;
  return valVoltage;
 

//  // Associate corresponding UV index
//  if(val < 50) {
//    return 0;
//  }
//  if(50 < val && val <= 227) {
//    return 1;
//  }
//  if(227 < val && val <= 318) {
//    return 2;
//  }
//  if(318 < val && val <= 408) {
//    return 3;
//  }
//  if(408 < val && val <= 503) {
//    return 4;
//  }
//  if(503 < val && val <= 606) {
//    return 5;
//  }  
//  if(606 < val && val <= 696) {
//    return 6;
//  }
//  if(696 < val && val <= 795) {
//    return 7;
//  }
//  if(795 < val && val <= 881) {
//    return 8;
//  }     
//  if(881 < val && val <= 976) {
//    return 9;
//  }  
//  if(976 < val && val <= 1079) {
//    return 10;
//  }  
//  if(1170 <= val) {
//    return 11;
//  }  
}


void printStatus() {
  timer = millis(); // reset the timer

  openlog.print(millis());
  openlog.print("      "); openlog.print(getTemperature());
  openlog.print("     "); openlog.print(getThermistor());
  openlog.print("     "); openlog.print(getHumidity());
  openlog.print("     "); openlog.print(getPressure());
  openlog.print("     "); openlog.print(getUV());
  openlog.print("     "); openlog.print(getAccelX());
  openlog.print("     "); openlog.print(getAccelY());
  openlog.print("     "); openlog.print(getAccelZ());

  if (GPS.fix) {
    openlog.print("     ");
    openlog.print(GPS.latitude, 4); openlog.print(GPS.lat);
    openlog.print("     ");
    openlog.print(GPS.longitude, 4); openlog.print(GPS.lon);

    openlog.print("     "); openlog.print(GPS.speed);
    //openlog.print("Angle: "); openlog.println(GPS.angle);
    openlog.print("     "); openlog.print(GPS.altitude);
    openlog.print("     "); openlog.println((int)GPS.satellites);
  } else {
    openlog.print("     ");
    openlog.print("Null");
    openlog.print("     ");
    openlog.print("Null");

    openlog.print("     "); openlog.print("Null");
    openlog.print("     "); openlog.print("Null");
    openlog.print("     "); openlog.println("Null");
  }
}


void loop() {
  char c = GPS.read();

  // Enable/disable raw NMEA string output
  if ((c) && (GPSECHO)) {
    openlog.write(c);
  }

  // Prevent printing statements from interfering with processing NMEA strings in the buffer
  if (GPS.newNMEAreceived()) {
    if (!GPS.parse(GPS.lastNMEA())) {
      return;
    }
  }

  if (!initStatement) {
    openlog.println("Time     Temp.     Therm.     RelHum.     Pres.     UV     Acc.-X     Acc.-Y.     Acc.-Z     Lat.     Lon.     Speed.     Alt.     #Satelites");
    initStatement = true;
  }

  // Print sensor status every second
  if (millis() - timer > 1000) {
    printStatus();
  }

//  delay(1000);
}
